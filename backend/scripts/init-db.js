/**
 * Script de Inicializaci√≥n de Base de Datos
 * 
 * Script utilitario para configurar la base de datos desde cero,
 * incluyendo la creaci√≥n de tablas y datos de ejemplo para desarrollo.
 * 
 * Funcionalidades:
 * - Verifica la conexi√≥n a PostgreSQL
 * - Registra todos los modelos de Sequelize
 * - Crea/recrea las tablas de la base de datos
 * - Inserta datos de ejemplo para desarrollo
 * - Maneja errores y limpia recursos apropiadamente
 * 
 * Uso:
 * - Desarrollo: Configuraci√≥n inicial del entorno
 * - Testing: Preparaci√≥n de base de datos de pruebas
 * - CI/CD: Inicializaci√≥n autom√°tica en pipelines
 * 
 * ADVERTENCIA: Este script usa { force: true } que ELIMINA
 * todas las tablas existentes. NO usar en producci√≥n.
 * 
 * @module InitDatabase
 * @author Backend Team
 */

import { sequelize } from '../Config/Db.js';
import { buildProductModel } from '../Infraestructure/Products/Models/ProductModel.js';

/**
 * Funci√≥n principal de inicializaci√≥n de la base de datos
 * 
 * Ejecuta todo el proceso de configuraci√≥n de la base de datos
 * de manera secuencial, manejando errores y limpiando recursos.
 * 
 * Proceso:
 * 1. Verificar conexi√≥n a PostgreSQL
 * 2. Registrar modelos de Sequelize
 * 3. Sincronizar esquema (crear/recrear tablas)
 * 4. Insertar datos de ejemplo
 * 5. Cerrar conexi√≥n limpiamente
 * 
 * @async
 * @function initDatabase
 * @throws {Error} Si falla alg√∫n paso cr√≠tico de la inicializaci√≥n
 */
async function initDatabase() {
  const startTime = Date.now();
  
  try {
    console.log('üöÄ Iniciando configuraci√≥n de base de datos...');
    console.log('üìÖ Timestamp:', new Date().toISOString());
    console.log('üåç Ambiente:', process.env.NODE_ENV || 'development');
    
    // === FASE 1: VERIFICACI√ìN DE CONEXI√ìN ===
    console.log('\nüì° Verificando conexi√≥n a PostgreSQL...');
    
    try {
      // Intentar autenticaci√≥n con la base de datos
      await sequelize.authenticate();
      console.log('‚úÖ Conexi√≥n a PostgreSQL establecida correctamente');
      
      // Mostrar informaci√≥n de la conexi√≥n
      const dbConfig = sequelize.config;
      console.log(`   üìä Base de datos: ${dbConfig.database}`);
      console.log(`   üè† Host: ${dbConfig.host}:${dbConfig.port || 5432}`);
      console.log(`   üë§ Usuario: ${dbConfig.username}`);
      
    } catch (connectionError) {
      console.error('‚ùå Error de conexi√≥n a PostgreSQL:');
      console.error('   Mensaje:', connectionError.message);
      console.error('   C√≥digo:', connectionError.original?.code);
      
      // Sugerencias de soluci√≥n comunes
      console.error('\nüí° Posibles soluciones:');
      console.error('   - Verificar que PostgreSQL est√© ejecut√°ndose');
      console.error('   - Revisar credenciales en el archivo .env');
      console.error('   - Confirmar que la base de datos existe');
      console.error('   - Verificar configuraci√≥n de red/firewall');
      
      throw connectionError;
    }

    // === FASE 2: REGISTRO DE MODELOS ===
    console.log('\nüìã Registrando modelos de Sequelize...');
    
    try {
      // Construir y registrar el modelo Product
      const ProductModel = buildProductModel(sequelize);
      console.log('‚úÖ Modelo Product registrado correctamente');
      
      // TODO: Registrar modelos adicionales aqu√≠
      // const UserModel = buildUserModel(sequelize);
      // const OrderModel = buildOrderModel(sequelize);
      
      console.log(`   üìä Total de modelos registrados: 1`);
      
    } catch (modelError) {
      console.error('‚ùå Error registrando modelos:', modelError.message);
      throw modelError;
    }

    // === FASE 3: SINCRONIZACI√ìN DE ESQUEMA ===
    console.log('\nüîÑ Sincronizando esquema de base de datos...');
    
    // ADVERTENCIA: force: true elimina todas las tablas existentes
    console.log('‚ö†Ô∏è  ADVERTENCIA: Se eliminar√°n todas las tablas existentes');
    
    try {
      // Sincronizar con force: true para recrear tablas
      // En producci√≥n, usar migraciones en lugar de sync()
      await sequelize.sync({ 
        force: true,  // PELIGROSO: Elimina tablas existentes
        logging: (sql) => console.log(`   üîç SQL: ${sql}`)
      });
      
      console.log('‚úÖ Esquema sincronizado correctamente');
      console.log('   üìã Todas las tablas han sido creadas/recreadas');
      
    } catch (syncError) {
      console.error('‚ùå Error sincronizando esquema:', syncError.message);
      throw syncError;
    }

    // === FASE 4: INSERCI√ìN DE DATOS DE EJEMPLO ===
    console.log('\nüì¶ Insertando datos de ejemplo...');
    
    try {
      // Obtener el modelo registrado
      const ProductModel = sequelize.models.Product;
      
      // Datos de ejemplo para desarrollo
      const sampleProducts = [
        {
          name: 'Laptop Gaming ROG Strix',
          price: 1299.99,
          stock: 15
        },
        {
          name: 'Mouse Inal√°mbrico Logitech',
          price: 79.99,
          stock: 50
        },
        {
          name: 'Teclado Mec√°nico RGB',
          price: 149.99,
          stock: 25
        },
        {
          name: 'Monitor 4K 27 pulgadas',
          price: 399.99,
          stock: 8
        },
        {
          name: 'Auriculares Gaming',
          price: 199.99,
          stock: 30
        }
      ];
      
      // Insertar productos de ejemplo
      const createdProducts = await ProductModel.bulkCreate(sampleProducts);
      
      console.log(`‚úÖ ${createdProducts.length} productos de ejemplo creados:`);
      createdProducts.forEach((product, index) => {
        console.log(`   ${index + 1}. ${product.name} - $${product.price} (Stock: ${product.stock})`);
      });
      
    } catch (dataError) {
      console.error('‚ùå Error insertando datos de ejemplo:', dataError.message);
      
      // Los datos de ejemplo no son cr√≠ticos, continuar
      console.log('‚ö†Ô∏è  Continuando sin datos de ejemplo...');
    }

    // === FINALIZACI√ìN EXITOSA ===
    const duration = Date.now() - startTime;
    console.log('\nüéâ Inicializaci√≥n completada exitosamente!');
    console.log(`‚è±Ô∏è  Tiempo total: ${duration}ms`);
    console.log('üöÄ La base de datos est√° lista para usar');
    
  } catch (error) {
    // === MANEJO DE ERRORES CR√çTICOS ===
    const duration = Date.now() - startTime;
    
    console.error('\nüí• Error cr√≠tico durante la inicializaci√≥n:');
    console.error('   Mensaje:', error.message);
    console.error('   Tipo:', error.constructor.name);
    console.error(`   Tiempo transcurrido: ${duration}ms`);
    
    // Mostrar stack trace en desarrollo
    if (process.env.NODE_ENV === 'development') {
      console.error('\nüìã Stack trace:');
      console.error(error.stack);
    }
    
    // Sugerir acciones de recuperaci√≥n
    console.error('\nüîß Acciones sugeridas:');
    console.error('   1. Verificar configuraci√≥n en .env');
    console.error('   2. Confirmar que PostgreSQL est√© ejecut√°ndose');
    console.error('   3. Revisar permisos de base de datos');
    console.error('   4. Consultar logs de PostgreSQL');
    
    // Re-lanzar el error para que el proceso termine con c√≥digo de error
    throw error;
    
  } finally {
    // === LIMPIEZA DE RECURSOS ===
    console.log('\nüßπ Cerrando conexi√≥n a la base de datos...');
    
    try {
      // Cerrar todas las conexiones de Sequelize
      await sequelize.close();
      console.log('‚úÖ Conexi√≥n cerrada correctamente');
      
    } catch (closeError) {
      console.error('‚ö†Ô∏è  Error cerrando conexi√≥n:', closeError.message);
      // No re-lanzar, ya que es limpieza
    }
  }
}

// === EJECUCI√ìN DEL SCRIPT ===

// Ejecutar la funci√≥n principal y manejar el resultado
initDatabase()
  .then(() => {
    console.log('\n‚ú® Script completado exitosamente');
    process.exit(0); // Salir con c√≥digo de √©xito
  })
  .catch((error) => {
    console.error('\nüíÄ Script fall√≥:', error.message);
    process.exit(1); // Salir con c√≥digo de error
  });

// === MANEJO DE SE√ëALES DEL SISTEMA ===

// Manejar interrupci√≥n del usuario (Ctrl+C)
process.on('SIGINT', async () => {
  console.log('\n‚ö†Ô∏è  Interrupci√≥n detectada, cerrando conexiones...');
  
  try {
    await sequelize.close();
    console.log('‚úÖ Conexiones cerradas correctamente');
  } catch (error) {
    console.error('‚ùå Error cerrando conexiones:', error.message);
  }
  
  process.exit(0);
});

// Manejar terminaci√≥n del proceso
process.on('SIGTERM', async () => {
  console.log('\n‚ö†Ô∏è  Terminaci√≥n solicitada, limpiando recursos...');
  
  try {
    await sequelize.close();
    console.log('‚úÖ Recursos limpiados correctamente');
  } catch (error) {
    console.error('‚ùå Error limpiando recursos:', error.message);
  }
  
  process.exit(0);
});